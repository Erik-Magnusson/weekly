@page "/register"
@inject IDispatcher<ActionType> dispatcher
@inject NavigationManager navManager
@inject IApiService apiService

<div class="container">
    <div class="row pt-5">
        <EditForm class="col-6 offset-3" Model=@credentials OnValidSubmit="@RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (invalidCredentials)
            {
                <ul class="validation-errors">
                    <li class="validation-message">Username not availible.</li>
                </ul>
            }
            <div class="form-group m-1">
                <InputText @bind-Value=credentials.Username class="form-control" id="username" placeholder="Username" />
            </div>
            <div class="form-group m-1">
                <InputText @bind-Value=credentials.Password type="password" class="form-control" id="password" placeholder="Password" />
            </div>
            <div class="m-1 mt-2">
                <input type="submit" class="btn btn-primary" value="Register" />
            </div>
        </EditForm>
    </div>
</div>
@code {

    private bool invalidCredentials = false;
    private Credentials credentials = new Credentials();

    private void RegisterUser()
    {
        var dispatchable = new Dispatchable<ActionType, Credentials>(ActionType.REGISTER_USER, credentials);
        dispatcher.Dispatch(dispatchable);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        dispatcher.Action += dispatchable =>
        {
            switch (dispatchable.ActionType)
            {
                case ActionType.AUTHENTICATE_USER:
                    var token = ((Dispatchable<ActionType, string>)dispatchable).Payload;
                    if (string.IsNullOrEmpty(token))
                    {
                        invalidCredentials = true;
                        break;
                    }
                    navManager.NavigateTo("/", true);
                    break;
            }
        };
    }

    
}
