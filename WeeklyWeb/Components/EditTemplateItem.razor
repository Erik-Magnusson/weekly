@inject IDispatcher Dispatcher
<div class="p-2 border-bottom border-dark">
    @if(isEditing)
    {
        <EditForm class="d-flex align-items-center justify-content-between" Model=@Item OnSubmit=@Save>
            <InputText @bind-Value=@Item.Text placeholder="@Item.Text" class="form-control me-2" id="todo-text" />
            <InputNumber @bind-Value=@Item.NrTotal placeholder="@Item.NrTotal" class="form-control me-2" id="todo-nr" />
            <InputSelect @bind-Value=@Item.Unit class="form-select me-2" id="todo-unit">
                @foreach (TodoUnit unit in (TodoUnit[]) Enum.GetValues(typeof(TodoUnit)))
                {
                <option value=@unit>@unit</option>
                }
            </InputSelect>
            <div class="d-flex justify-content-end material-icons">
                <button type="submit" class="btn btn-primary me-1">done</button>
                <button type="button" class="btn btn-warning" @onclick="() => isEditing = false">close</button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <p class="col-3 m-0">@Item.Text</p>
            <p class="col-1 m-0">@Item.NrTotal</p>
            <p class="col-2 m-0">@Item.Unit</p>
        
            <div class="col-6 material-icons d-flex justify-content-end align-items-start">
                <button class="btn btn-primary ms-1" @onclick="() => isEditing = !isEditing">edit</button>
                <button class="btn btn-success ms-1" @onclick="AddTodo">add</button>
                <button class="btn btn-danger ms-1" @onclick="DeleteTemplate">delete_outline</button>
            </div>
        </div>

    }
</div>

@code {
    [Parameter]
    public required Todo Item { get; set; }


    private bool isEditing;

    private void Save()
    {
        Item.ActionType = ActionType.UPDATE_TEMPLATE;
        isEditing = false;
        Dispatcher.Dispatch(Item);
    }

    private void AddTodo()
    {
        Item.ActionType = ActionType.ADD_TODO;
        Dispatcher.Dispatch(new Todo(Item));
    }

    private void DeleteTemplate()
    {
        Item.ActionType = ActionType.DELETE_TEMPLATE;
        Dispatcher.Dispatch(Item);
    }



}
